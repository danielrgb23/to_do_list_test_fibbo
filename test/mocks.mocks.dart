// Mocks generated by Mockito 5.4.4 from annotations
// in to_do_list/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:to_do_list/models/task.dart' as _i5;
import 'package:to_do_list/services/auth_service.dart' as _i6;
import 'package:to_do_list/services/task_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i3.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  void setUserId(String? userId) => super.noSuchMethod(
        Invocation.method(
          #setUserId,
          [userId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<List<_i5.Task>> fetchTasks({bool? showAll = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
          {#showAll: showAll},
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<void> addTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> toggleTaskVisibility(
    int? id,
    bool? isView,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleTaskVisibility,
          [
            id,
            isView,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> restoreTasksFromFirebase(List<_i5.Task>? firebaseTasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreTasksFromFirebase,
          [firebaseTasks],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteGuestTasks() => (super.noSuchMethod(
        Invocation.method(
          #deleteGuestTasks,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearLocalData() => (super.noSuchMethod(
        Invocation.method(
          #clearLocalData,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String?> userLogin({
    required String? email,
    required String? senha,
    required Function? onFail,
    required Function? onSuccess,
    required _i7.BuildContext? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #userLogin,
          [],
          {
            #email: email,
            #senha: senha,
            #onFail: onFail,
            #onSuccess: onSuccess,
            #context: context,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> cadastrarUsuario({
    required String? email,
    required String? name,
    required String? password,
    required Function? onSuccess,
    required Function? onFail,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cadastrarUsuario,
          [],
          {
            #email: email,
            #name: name,
            #password: password,
            #onSuccess: onSuccess,
            #onFail: onFail,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> removerConta({required String? senha}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removerConta,
          [],
          {#senha: senha},
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<String?> resetPassword({
    required String? email,
    required Function? onFail,
    required Function? onSuccess,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #email: email,
            #onFail: onFail,
            #onSuccess: onSuccess,
          },
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
